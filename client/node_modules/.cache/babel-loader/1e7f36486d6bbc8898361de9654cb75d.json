{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\GitHub\\\\project-iii\\\\client\\\\src\\\\components\\\\address\\\\addressForm.jsx\";\nimport React, { Component } from 'react';\nimport AddressInput from './addressInput';\nimport AddressCapture from './addressCapture';\nimport axios from 'axios';\nconst apiKey = 'NMNsDXKtlI-lu6Z4ro_kmLuRmJTxHhdzjN8emy08418';\n\nclass AddressForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.getInitialState(); // User enters something in address bar\n\n    this.onQuery = this.onQuery.bind(this); // User enters something in address field\n\n    this.onAddressChange = this.onAddressChange.bind(this); // User clicks check button\n\n    this.onCheck = this.onCheck.bind(this); // User clicks clear button\n\n    this.onClear = this.onClear.bind(this);\n  }\n\n  onQuery(e) {\n    const query = e.target.value;\n\n    if (!query.length > 0) {\n      this.setState(this.getInitialState());\n      return;\n    }\n\n    const self = this;\n    axios.get('https://autocomplete.geocoder.ls.hereapi.com/6.2/suggest.json', {\n      'params': {\n        'apiKey': apiKey,\n        'query': query,\n        'maxresults': 1\n      }\n    }).then(function (response) {\n      if (response.data.suggestions.length > 0) {\n        const id = response.data.suggestions[0].locationId;\n        const address = response.data.suggestions[0].address;\n        self.setState({\n          'address': address,\n          'query': query,\n          'locationId': id\n        });\n      } else {\n        const state = self.getInitialState();\n        self.setState(state);\n      }\n    });\n  }\n\n  getInitialState() {\n    return {\n      'address': {\n        'street': '',\n        'city': '',\n        'state': '',\n        'zipCode': '',\n        'country': ''\n      },\n      'query': '',\n      'locationId': '',\n      'isChecked': false,\n      'coords': {}\n    };\n  }\n\n  onClear(e) {\n    const state = this.getInitialState();\n    this.setState(state);\n  }\n\n  onAddressChange(e) {\n    const id = e.target.id;\n    const val = e.target.value;\n    let state = this.state;\n    state.address[id] = val;\n    this.setState(state);\n  }\n\n  onCheck(e) {\n    let params = {\n      'apiKey': apiKey\n    };\n\n    if (this.state.locationId.length > 0) {\n      params['locationId'] = this.state.locationId;\n    } else {\n      params['searchtext'] = this.state.address.street + this.state.address.city + this.state.address.state + this.state.address.postalCode + this.state.address.country;\n    }\n\n    const self = this;\n    axios.get('https://geocoder.ls.hereapi.com/6.2/geocode.json', {\n      'params': params\n    }).then(function (response) {\n      const view = response.data.Response.View;\n\n      if (view.length > 0 && view[0].Result.length > 0) {\n        const location = view[0].Result[0].Location;\n        self.setState({\n          'isChecked': 'true',\n          'locationId': '',\n          'query': location.Address.Label,\n          'address': {\n            'street': location.Address.HouseNumber + ' ' + location.Address.Street,\n            'city': location.Address.City,\n            'state': location.Address.State,\n            'postalCode': location.Address.PostalCode,\n            'country': location.Address.Country\n          },\n          'coords': {\n            'lat': location.DisplayPosition.Latitude,\n            'lon': location.DisplayPosition.Longitude\n          }\n        });\n      } else {\n        self.setState({\n          'isChecked': true,\n          'coords': null\n        });\n      }\n    }).catch(function (error) {\n      console.log('caught failed query');\n      self.setState({\n        'isChecked': true,\n        'coords': null\n      });\n    });\n  }\n\n  alert() {\n    if (!this.state.isChecked) {\n      return;\n    }\n\n    if (this.state.coords === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-warning\",\n        role: \"alert\",\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Invalid.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), \" The address is not recognized.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-success\",\n        role: \"alert\",\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Valid Address.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), \"  Location is \", this.state.coords.lat, \", \", this.state.coords.lon, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  render() {\n    let result = this.alert();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(AddressInput, {\n        query: this.state.query,\n        onChange: this.onQuery\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AddressCapture, {\n        street: this.state.address.street,\n        city: this.state.address.city,\n        state: this.state.address.state,\n        postalCode: this.state.address.postalCode,\n        country: this.state.address.country,\n        onChange: this.onAddressChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this), result, /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        onClick: this.onCheck,\n        children: \"Check\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-outline-secondary\",\n        onClick: this.onClear,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default AddressForm;","map":{"version":3,"sources":["D:/GitHub/project-iii/client/src/components/address/addressForm.jsx"],"names":["React","Component","AddressInput","AddressCapture","axios","apiKey","AddressForm","constructor","props","state","getInitialState","onQuery","bind","onAddressChange","onCheck","onClear","e","query","target","value","length","setState","self","get","then","response","data","suggestions","id","locationId","address","val","params","street","city","postalCode","country","view","Response","View","Result","location","Location","Address","Label","HouseNumber","Street","City","State","PostalCode","Country","DisplayPosition","Latitude","Longitude","catch","error","console","log","alert","isChecked","coords","lat","lon","render","result"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport AddressInput from './addressInput';\r\nimport AddressCapture from './addressCapture';\r\nimport axios from 'axios';\r\n\r\nconst apiKey = 'NMNsDXKtlI-lu6Z4ro_kmLuRmJTxHhdzjN8emy08418';\r\n\r\nclass AddressForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = this.getInitialState();\r\n\r\n    // User enters something in address bar\r\n    this.onQuery = this.onQuery.bind(this);\r\n    // User enters something in address field\r\n    this.onAddressChange = this.onAddressChange.bind(this);\r\n    // User clicks check button\r\n    this.onCheck = this.onCheck.bind(this);\r\n    // User clicks clear button\r\n    this.onClear = this.onClear.bind(this);\r\n  }\r\n\r\n  onQuery(e) {\r\n    const query = e.target.value;\r\n\r\n    if (!query.length > 0) {\r\n      this.setState(this.getInitialState());\r\n      return;\r\n    }\r\n\r\n    const self = this;\r\n    axios.get('https://autocomplete.geocoder.ls.hereapi.com/6.2/suggest.json',\r\n      {'params': {\r\n        'apiKey': apiKey,\r\n        'query': query,\r\n        'maxresults': 1,\r\n      }}).then(function (response) {\r\n          if (response.data.suggestions.length > 0) {\r\n            const id = response.data.suggestions[0].locationId;\r\n            const address = response.data.suggestions[0].address;\r\n            self.setState({\r\n              'address' : address,\r\n              'query' : query,\r\n              'locationId': id\r\n            })\r\n          } else {\r\n            const state = self.getInitialState();\r\n            self.setState(state);\r\n          }\r\n      });\r\n  }\r\n\r\n  getInitialState() {\r\n    return {\r\n      'address': {\r\n        'street': '',\r\n        'city': '',\r\n        'state': '',\r\n        'zipCode': '',\r\n        'country': ''\r\n      },\r\n      'query': '',\r\n      'locationId': '',\r\n      'isChecked': false,\r\n      'coords': {}\r\n    }\r\n  }\r\n\r\n  onClear(e) {\r\n    const state = this.getInitialState();\r\n    this.setState(state);\r\n  }\r\n\r\n  onAddressChange(e) {\r\n    const id = e.target.id\r\n    const val = e.target.value\r\n\r\n    let state = this.state\r\n    state.address[id] = val;\r\n    this.setState(state);\r\n  }\r\n\r\n  onCheck(e) {\r\n    let params = {\r\n        'apiKey': apiKey,\r\n    }\r\n\r\n    if (this.state.locationId.length > 0) {\r\n      params['locationId'] = this.state.locationId;\r\n    } else {\r\n      params['searchtext'] = this.state.address.street\r\n        + this.state.address.city\r\n        + this.state.address.state\r\n        + this.state.address.postalCode\r\n        + this.state.address.country;\r\n    }\r\n\r\n    const self = this;\r\n    axios.get('https://geocoder.ls.hereapi.com/6.2/geocode.json',\r\n      {'params': params }\r\n      ).then(function (response) {\r\n        const view = response.data.Response.View\r\n        if (view.length > 0 && view[0].Result.length > 0) {\r\n          const location = view[0].Result[0].Location;\r\n\r\n          self.setState({\r\n            'isChecked': 'true',\r\n            'locationId': '',\r\n            'query': location.Address.Label,\r\n            'address': {\r\n              'street': location.Address.HouseNumber + ' ' + location.Address.Street,\r\n              'city': location.Address.City,\r\n              'state': location.Address.State,\r\n              'postalCode': location.Address.PostalCode,\r\n              'country': location.Address.Country\r\n            },\r\n            'coords': {\r\n              'lat': location.DisplayPosition.Latitude,\r\n              'lon': location.DisplayPosition.Longitude\r\n            }\r\n          });\r\n        } else {\r\n          self.setState({\r\n            'isChecked': true,\r\n            'coords': null,\r\n          })\r\n        }\r\n\r\n      })\r\n      .catch(function (error) {\r\n        console.log('caught failed query');\r\n        self.setState({\r\n          'isChecked': true,\r\n          'coords': null,\r\n        });\r\n      });\r\n  }\r\n\r\n  alert() {\r\n    if (!this.state.isChecked) {\r\n      return;\r\n    }\r\n\r\n    if (this.state.coords === null) {\r\n      return (\r\n        <div className=\"alert alert-warning\" role=\"alert\">\r\n          <b>Invalid.</b> The address is not recognized.\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"alert alert-success\" role=\"alert\">\r\n          <b>Valid Address.</b>  Location is {this.state.coords.lat}, {this.state.coords.lon}.\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let result = this.alert();\r\n    return (\r\n        <div className=\"container\">\r\n          <AddressInput\r\n            query={this.state.query}\r\n            onChange={this.onQuery}\r\n            />\r\n          <AddressCapture\r\n            street={this.state.address.street}\r\n            city={this.state.address.city}\r\n            state={this.state.address.state}\r\n            postalCode={this.state.address.postalCode}\r\n            country={this.state.address.country}\r\n            onChange={this.onAddressChange}\r\n            />\r\n          <br/>\r\n          { result }\r\n          <button type=\"submit\" className=\"btn btn-primary\" onClick={this.onCheck}>Check</button>\r\n          <button type=\"submit\" className=\"btn btn-outline-secondary\" onClick={this.onClear}>Clear</button>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default AddressForm;"]},"metadata":{},"sourceType":"module"}